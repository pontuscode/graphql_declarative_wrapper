type WrappedUniversity {
	id: ID
	undergraduateDegreeObtainedByFaculty: [WrappedFaculty]
	departments: [WrappedDepartment]
	undergraduateDegreeObtainedBystudent: [WrappedGraduateStudent]
}

 interface WrappedFaculty {
	id: ID
	telephone: String
	emailAddress: String
	undergraduateDegreeFrom: WrappedUniversity
	masterDegreeFrom: WrappedUniversity
	doctoralDegreeFrom: WrappedUniversity
}

 type WrappedDepartment {
	id: ID
	subOrganizationOf: WrappedUniversity
	faculties: [WrappedFaculty]
}

 interface WrappedAuthor {
	id: ID
	telephone: String
	emailAddress: String
}

 type WrappedProfessor implements & WrappedFaculty & WrappedAuthor {
	id: ID
	telephone: String
	emailAddress: String
	researchInterest: String
	profType: String
	undergraduateDegreeFrom: WrappedUniversity
	masterDegreeFrom: WrappedUniversity
	doctoralDegreeFrom: WrappedUniversity
	worksFor: WrappedDepartment
}

 type WrappedLecturer implements & WrappedFaculty & WrappedAuthor {
	id: ID
	telephone: String
	emailAddress: String
	position: String
	undergraduateDegreeFrom: WrappedUniversity
	masterDegreeFrom: WrappedUniversity
	doctoralDegreeFrom: WrappedUniversity
	worksFor: WrappedDepartment
}

 type WrappedGraduateStudent implements & WrappedAuthor {
	id: ID
	telephone: String
	emailAddress: String
	age: Int
	memberOf: WrappedDepartment
	undergraduateDegreeFrom: WrappedUniversity
	advisor: WrappedProfessor
}

type Query {
    
    wrappedUniversity(nr: ID!): WrappedUniversity
        
    wrappedFaculty(nr: ID!): WrappedFaculty
        
    wrappedDepartment(nr: ID!): WrappedDepartment
        
    wrappedGraduateStudents: [WrappedGraduateStudent]
        
}